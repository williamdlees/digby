/**
 * DIgServer API
 * API for Ig Receptor gene data
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GenomicService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns information on all samples
     * 
     * @param species 
     * @param dataset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSamplesInfoApi(species: string, dataset: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllSamplesInfoApi(species: string, dataset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllSamplesInfoApi(species: string, dataset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllSamplesInfoApi(species: string, dataset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAllSamplesInfoApi.');
        }

        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling getAllSamplesInfoApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/all_samples_info/${encodeURIComponent(String(species))}/${encodeURIComponent(String(dataset))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return genotypes for all subjects of the specified species in the specified data type
     * 
     * @param species 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSubjectsGenotypeApi(species: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllSubjectsGenotypeApi(species: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllSubjectsGenotypeApi(species: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllSubjectsGenotypeApi(species: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAllSubjectsGenotypeApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/all_subjects_genotype/${encodeURIComponent(String(species))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of annotated assemblies for the selected species and datasets
     * 
     * @param species 
     * @param dataSets 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssemblyApi(species: string, dataSets: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAssemblyApi(species: string, dataSets: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAssemblyApi(species: string, dataSets: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAssemblyApi(species: string, dataSets: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAssemblyApi.');
        }

        if (dataSets === null || dataSets === undefined) {
            throw new Error('Required parameter dataSets was null or undefined when calling getAssemblyApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/assemblies/${encodeURIComponent(String(species))}/${encodeURIComponent(String(dataSets))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of data sets for the selected species
     * 
     * @param species 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataSetApi(species: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDataSetApi(species: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDataSetApi(species: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDataSetApi(species: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getDataSetApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/data_sets/${encodeURIComponent(String(species))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information and statistics on the dataset
     * 
     * @param species 
     * @param dataset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataSetInfoApi(species: string, dataset: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDataSetInfoApi(species: string, dataset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDataSetInfoApi(species: string, dataset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDataSetInfoApi(species: string, dataset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getDataSetInfoApi.');
        }

        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling getDataSetInfoApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/dataset_info/${encodeURIComponent(String(species))}/${encodeURIComponent(String(dataset))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the position of the first feature matching the specified string
     * 
     * @param species 
     * @param dataset 
     * @param refSeqName 
     * @param featureString 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFeaturePosApi(species: string, dataset: string, refSeqName: string, featureString: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFeaturePosApi(species: string, dataset: string, refSeqName: string, featureString: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFeaturePosApi(species: string, dataset: string, refSeqName: string, featureString: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFeaturePosApi(species: string, dataset: string, refSeqName: string, featureString: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getFeaturePosApi.');
        }

        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling getFeaturePosApi.');
        }

        if (refSeqName === null || refSeqName === undefined) {
            throw new Error('Required parameter refSeqName was null or undefined when calling getFeaturePosApi.');
        }

        if (featureString === null || featureString === undefined) {
            throw new Error('Required parameter featureString was null or undefined when calling getFeaturePosApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/feature_pos/${encodeURIComponent(String(species))}/${encodeURIComponent(String(dataset))}/${encodeURIComponent(String(refSeqName))}/${encodeURIComponent(String(featureString))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the inferred genotype (in MiAIRR format) of the specified patient
     * 
     * @param species 
     * @param patientName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGenotypeApi(species: string, patientName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getGenotypeApi(species: string, patientName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getGenotypeApi(species: string, patientName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getGenotypeApi(species: string, patientName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getGenotypeApi.');
        }

        if (patientName === null || patientName === undefined) {
            throw new Error('Required parameter patientName was null or undefined when calling getGenotypeApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/genotype/${encodeURIComponent(String(species))}/${encodeURIComponent(String(patientName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns nucleotide sequences from selected reference or multiple references (separate multiple reference names with &#39;,&#39;)
     * 
     * @param species 
     * @param genomicDatasets 
     * @param pageNumber 
     * @param pageSize 
     * @param filter 
     * @param sortBy 
     * @param cols 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSequencesApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSequencesApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSequencesApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSequencesApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getSequencesApi.');
        }

        if (genomicDatasets === null || genomicDatasets === undefined) {
            throw new Error('Required parameter genomicDatasets was null or undefined when calling getSequencesApi.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('page_number', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (cols !== undefined && cols !== null) {
            queryParameters = queryParameters.set('cols', <any>cols);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/sequences/${encodeURIComponent(String(species))}/${encodeURIComponent(String(genomicDatasets))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of species for which information is held
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpeciesApi(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSpeciesApi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSpeciesApi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSpeciesApi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/species`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information on the selected sample
     * 
     * @param species 
     * @param dataset 
     * @param sampleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubjectInfoApi(species: string, dataset: string, sampleId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSubjectInfoApi(species: string, dataset: string, sampleId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSubjectInfoApi(species: string, dataset: string, sampleId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSubjectInfoApi(species: string, dataset: string, sampleId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getSubjectInfoApi.');
        }

        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling getSubjectInfoApi.');
        }

        if (sampleId === null || sampleId === undefined) {
            throw new Error('Required parameter sampleId was null or undefined when calling getSubjectInfoApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/subject_info/${encodeURIComponent(String(species))}/${encodeURIComponent(String(dataset))}/${encodeURIComponent(String(sampleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of subjects in the selected datasets
     * 
     * @param species 
     * @param genomicDatasets 
     * @param pageNumber 
     * @param pageSize 
     * @param filter 
     * @param sortBy 
     * @param cols 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubjectsApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSubjectsApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSubjectsApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSubjectsApi(species: string, genomicDatasets: string, pageNumber?: number, pageSize?: number, filter?: string, sortBy?: string, cols?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getSubjectsApi.');
        }

        if (genomicDatasets === null || genomicDatasets === undefined) {
            throw new Error('Required parameter genomicDatasets was null or undefined when calling getSubjectsApi.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('page_number', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (cols !== undefined && cols !== null) {
            queryParameters = queryParameters.set('cols', <any>cols);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/subjects/${encodeURIComponent(String(species))}/${encodeURIComponent(String(genomicDatasets))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
