/**
 * DIgServer API
 * API for Ig Receptor gene data
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GenomicService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns the list of features within the specified reference sequence and range
     * 
     * @param species 
     * @param refSeq 
     * @param start 
     * @param end 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJbrowseFeatureApi(species: string, refSeq: string, start: number, end: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getJbrowseFeatureApi(species: string, refSeq: string, start: number, end: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getJbrowseFeatureApi(species: string, refSeq: string, start: number, end: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getJbrowseFeatureApi(species: string, refSeq: string, start: number, end: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getJbrowseFeatureApi.');
        }

        if (refSeq === null || refSeq === undefined) {
            throw new Error('Required parameter refSeq was null or undefined when calling getJbrowseFeatureApi.');
        }

        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling getJbrowseFeatureApi.');
        }

        if (end === null || end === undefined) {
            throw new Error('Required parameter end was null or undefined when calling getJbrowseFeatureApi.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (end !== undefined && end !== null) {
            queryParameters = queryParameters.set('end', <any>end);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/jbrowse/${encodeURIComponent(String(species))}/features/${encodeURIComponent(String(refSeq))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns global statistics about features served from this store
     * 
     * @param species 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJbrowseGLobalStatsApi(species: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getJbrowseGLobalStatsApi(species: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getJbrowseGLobalStatsApi(species: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getJbrowseGLobalStatsApi(species: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getJbrowseGLobalStatsApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/jbrowse/${encodeURIComponent(String(species))}/stats/global`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns statistics for a particular region
     * 
     * @param species 
     * @param refSeq 
     * @param start 
     * @param end 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJbrowseRegionalStatsApi(species: string, refSeq: string, start: number, end: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getJbrowseRegionalStatsApi(species: string, refSeq: string, start: number, end: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getJbrowseRegionalStatsApi(species: string, refSeq: string, start: number, end: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getJbrowseRegionalStatsApi(species: string, refSeq: string, start: number, end: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getJbrowseRegionalStatsApi.');
        }

        if (refSeq === null || refSeq === undefined) {
            throw new Error('Required parameter refSeq was null or undefined when calling getJbrowseRegionalStatsApi.');
        }

        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling getJbrowseRegionalStatsApi.');
        }

        if (end === null || end === undefined) {
            throw new Error('Required parameter end was null or undefined when calling getJbrowseRegionalStatsApi.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (end !== undefined && end !== null) {
            queryParameters = queryParameters.set('end', <any>end);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/jbrowse/${encodeURIComponent(String(species))}/stats/region/${encodeURIComponent(String(refSeq))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of annotated reference sequences for the selected species
     * 
     * @param species 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRefSeqApi(species: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRefSeqApi(species: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRefSeqApi(species: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRefSeqApi(species: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getRefSeqApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/ref_seqs/${encodeURIComponent(String(species))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of species for which information is held
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpeciesApi(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSpeciesApi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSpeciesApi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSpeciesApi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/genomic/species`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
