/**
 * DIgServer API
 * API for Ig Receptor gene data
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RefbookService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns sequences of all alleles in an ASC
     *
     * @param species
     * @param locus
     * @param asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAscSeqs(species: string, locus: string, asc: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAscSeqs(species: string, locus: string, asc: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAscSeqs(species: string, locus: string, asc: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAscSeqs(species: string, locus: string, asc: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAscSeqs.');
        }

        if (locus === null || locus === undefined) {
            throw new Error('Required parameter locus was null or undefined when calling getAscSeqs.');
        }

        if (asc === null || asc === undefined) {
            throw new Error('Required parameter asc was null or undefined when calling getAscSeqs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/refbook/asc_seqs/${encodeURIComponent(String(species))}/${encodeURIComponent(String(locus))}/${encodeURIComponent(String(asc))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns usage statistics for all alleles in an ASC
     *
     * @param species
     * @param locus
     * @param asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAscUsage(species: string, locus: string, asc: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAscUsage(species: string, locus: string, asc: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAscUsage(species: string, locus: string, asc: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAscUsage(species: string, locus: string, asc: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAscUsage.');
        }

        if (locus === null || locus === undefined) {
            throw new Error('Required parameter locus was null or undefined when calling getAscUsage.');
        }

        if (asc === null || asc === undefined) {
            throw new Error('Required parameter asc was null or undefined when calling getAscUsage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/refbook/asc_usage/${encodeURIComponent(String(species))}/${encodeURIComponent(String(locus))}/${encodeURIComponent(String(asc))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns zygosity statistics for all subjects in a given ASC
     *
     * @param species
     * @param locus
     * @param asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAscZygosity(species: string, locus: string, asc: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAscZygosity(species: string, locus: string, asc: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAscZygosity(species: string, locus: string, asc: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAscZygosity(species: string, locus: string, asc: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAscZygosity.');
        }

        if (locus === null || locus === undefined) {
            throw new Error('Required parameter locus was null or undefined when calling getAscZygosity.');
        }

        if (asc === null || asc === undefined) {
            throw new Error('Required parameter asc was null or undefined when calling getAscZygosity.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/refbook/asc_zygousity/${encodeURIComponent(String(species))}/${encodeURIComponent(String(locus))}/${encodeURIComponent(String(asc))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of ASCs in a given locus for a given species
     *
     * @param species
     * @param locus
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAscsInLocusApi(species: string, locus: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAscsInLocusApi(species: string, locus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAscsInLocusApi(species: string, locus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAscsInLocusApi(species: string, locus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAscsInLocusApi.');
        }

        if (locus === null || locus === undefined) {
            throw new Error('Required parameter locus was null or undefined when calling getAscsInLocusApi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/refbook/ascs_in_locus/${encodeURIComponent(String(species))}/${encodeURIComponent(String(locus))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns data for the overview refbook component
     *
     * @param species
     * @param chain
     * @param asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAscsOverview(species: string, chain: string, asc: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAscsOverview(species: string, chain: string, asc: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAscsOverview(species: string, chain: string, asc: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAscsOverview(species: string, chain: string, asc: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (species === null || species === undefined) {
            throw new Error('Required parameter species was null or undefined when calling getAscsOverview.');
        }

        if (chain === null || chain === undefined) {
            throw new Error('Required parameter chain was null or undefined when calling getAscsOverview.');
        }

        if (asc === null || asc === undefined) {
            throw new Error('Required parameter asc was null or undefined when calling getAscsOverview.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/refbook/ascs_overview/${encodeURIComponent(String(species))}/${encodeURIComponent(String(chain))}/${encodeURIComponent(String(asc))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the list of species and loci for which information is held
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpeciesApi(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSpeciesApi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSpeciesApi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSpeciesApi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/refbook/species_and_loci`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
